# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: MongoDB Tests

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop"  ]

jobs:
  test:
    environment:
      name: vitals
    env:
      PORT: ${{secrets.PORT}}
      MONGODB_URI: ${{secrets.MONGODB_URI}}
      MONGODB_URI_offline: ${{secrets.MONGODB_URI_offline}}
      JWT_SECRET: ${{secrets.JWT_SECRET}}
      CLOUDINARY_CLOUD_NAME: ${{secrets.CLOUDINARY_CLOUD_NAME}}
      CLOUDINARY_API_KEY: ${{secrets.CLOUDINARY_API_KEY}}
      CLOUDINARY_API_SECRET: ${{secrets.CLOUDINARY_API_SECRET}}
      EMAIL_USER: ${{secrets.EMAIL_USER}}
      EMAIL_PASS: ${{secrets.EMAIL_PASS}}
      NODE_ENV: ${{secrets.NODE_ENV}}
  
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [14.x, 16.x, 18.x]

    steps:
      - name: Set up MongoDB Server
        run: docker run -d -p 27017:27017 --name mongodb mongo:latest

      - name: Set MongoDB Connection String
        run: echo "MONGODB_URI_testing=mongodb://localhost:27017/DPR_testing" >> $GITHUB_ENV

      - name: Clone repository
        uses: actions/checkout@v3

      - name: Install dependencies and run tests
        run: |
          # Install dependencies (e.g., Node.js, npm, etc.)
          npm install
          
          # Run your tests that use the MongoDB connection string
          npm test